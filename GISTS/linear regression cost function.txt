public static double linRgrCost(DoubleMatrix batchTrainingEx,
	    DoubleMatrix batchTargets, DoubleMatrix weight) {
	
	int m = batchTargets.length;
	// J=(X*theta-y)' * (X*theta-y);
	DoubleMatrix part1 = batchTrainingEx.mmul(weight).sub(batchTargets)
		.transpose();
	DoubleMatrix part2 = batchTrainingEx.mmul(weight).sub(batchTargets);
	DoubleMatrix j = part1.mmul(part2);
	// J=J / (2*m);
	j.divi(2 * m);
	return j.sum();
    }

    public static double linRgrCost(DoubleMatrix batchTrainingEx,
	    DoubleMatrix batchTargets, DoubleMatrix weight, DoubleMatrix bias) {
	batchTrainingEx = DoubleMatrix.concatHorizontally(
		DoubleMatrix.ones(batchTrainingEx.rows), batchTrainingEx);
	weight = DoubleMatrix.concatVertically(bias, weight);
	return linRgrCost(batchTrainingEx, batchTargets, weight);
    }